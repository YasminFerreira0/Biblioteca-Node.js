- index.js 
    O método flatMap() primeiro mapeia cada elemento usando uma função de mapeamento e, em seguida, nivela o resultado em um novo array.

Faz o mesmo pracesso fo flatmap, o função .filter filtra a array e a .map mapeia os paragrafos retornando a quantidade de palavras duplicadas: 

/*function quebraEmParagrafos(texto){
    .filter((paragrafo) => paragrafo).map((paragrafo) =>{
        return verificapalavrasDublicadas(paragrafo);
    });
}*/


    .toLowerCase() -- transforma letras maiusculas em menuscuas
    .split() -- inclui um separador

    .replace() --  expressão regular, serve para substituir um caracter por outro.


- cli.js 
Blibliotecas nativas do node: 
    import fs from 'fs'; -- file system - usada para ser e escrever arquivos de texto.

    import path from 'path'; -- faz o gerenciamento de caminho relativos e absolutos de todos os arquivos que são referenciados no programa

    import { Command } from 'commander'; -- facilita a criação de comandos e manipulação de flags e options

//const caminhoArquivo = require('./arquivos/texto-web.txt') // referencia a um arquivo externo. So funciona modulos js, como arquivos json.

//const caminhoArquivo = process.argv; //vetor de argumentos, pega os valores que são passados pelo terminal e os coloca em um array, são passados na orgem em que sao executados
// O process.argv possibilita que enviemos comandos para o terminal, os quais são inseridos em um array. Dessa forma, ao estarem dentro de um array, podemos utilizá-los em nosso código.


/*fs.readFile(link, 'utf-8', (erro, texto) => {
    //try, codigo em que é possiver dar erro, monitora o codigo e se acontecer agum erro ele capitura. No bloco catch fica o tratamento do erro capiturado. O throw 'pega' o erro da função assincrona do readFile e 'lança pra frente'
    try{ 
        if(erro) throw erro;
        const resultado = contaPalavras(texto);
        criaESalvaArquivos(resultado, endereco);
    }catch(erro){
        trataErros(erro);
    }
}); //recebe 2 parameltro, o primeiro e o caminho do arquivo, o segundo e uma função assincrona
*/

//JSON.stringify(listaPalavras);//converte arrays e objetos para string



//codigo sincrono - os processos ocorrem um apos o outro em sequencia, bloqueia a execução do restante do codigo ate que o processo seja finalizado
//codigo assincrono - os processos correm cada um no seu tempo, sem bloquear a execução do restante do codigo

/*
Usos comuns de codigo assincrono:
    >Leitura/manipulação de arquivos em disco
    >Comunicação entre cliente e servisor
    >Operações em banco de dados
*/ 

//Promessas - encapsula e lido com operações assincronas, representa os possiveis estados de uma promessa, podem estar pendentes, resolvidas ou rejeitadas 
//async - e adicionado na declaração da função para indicar ao interpretador que aquele trecho de codigo é assincrono
//await - adicionado na linha onde é executado a metodo assincrono em si.

/*
 .then

 function criaESalvaArquivos (listaPalavras, endereco){
    const arquivoNovo = `${endereco}/resultado.txt`;
    const textoPalavras = JSON.stringify(listaPalavras);
    
    fs.promises.writeFile(arquivoNovo, textoPalavras)
        .then(()=>{
            console.log('arquivo criado');
        }).catch((erro)=>{
            throw erro;
        }).finally(()=>{ console.log('operação fianalizada')})
}
            
then - é uma função callback
O objeto promise representa a eventual conclusão ou falha de uma operação assincrona e seu valor resultante
funções assincronas retornam objetos promise
O them é a função responsavel por fazer a conclusão da promessa, contem o processamento feito com o resultado da promessa.
o catch lida com a rejeição da promessa
finally - o codigo que vai ser executado independente de falha, sempre acontece. util pra fechar conecções com banco de dados

*/





-helpers.js 
    //helper functions sao funções mais simple que fazem coisas expecificas que nao estao relacionadas com a funcionalidade principal

//todo metodo callback de array tem o parametro principal que e o elemento, e um parametro opcional que e o indice



-funcoesErro.js 
    //module.exports = trataErros; //forma 'nativa' de lidar com exportacoes no node
    //package.json  - arquivo manifesto, contem as infomcoes que a aplicacao precisa para executar(npm ini -y)






o funcionamento de uma função callback envolve a chamada (ou execução) da função interna após a finalização da função mais externa, quando os dados resultantes são passados como parâmetro.

Promise (ou promessa), um objeto que representa a eventual resolução de um processamento assíncrono.

https://nodejs.org/api/process.html#processargv

https://nodejs.org/api/fs.html#fsreadfilepath-options-callback

https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap

https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error

https://www.alura.com.br/artigos/guia-importacao-exportacao-modulos-javascript

https://www.alura.com.br/artigos/async-await-no-javascript-o-que-e-e-quando-usar

https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Promise

https://www.npmjs.com/package/commander

https://www.npmjs.com/package/chalk


// o npm é um repositorio de codigo expecifico, node packge manager, repositorio de pacotes do node


//desestruturação - envolver duas variaveis em chaves